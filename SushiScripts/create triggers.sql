GO
USE SushiDB
GO

-- •	Với mỗi chi nhánh, thời gian mở cửa phải trước thời gian đóng cửa.
GO
	CREATE TRIGGER TRG_CHINHANH_INSERT_UPDATE_TGMOCUA
	ON CHINHANH
	FOR INSERT, UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		IF EXISTS	(SELECT 1
					FROM INSERTED
					WHERE THOIGIANDONGCUA <= THOIGIANMOCUA
					)
		BEGIN
			RAISERROR (N'Với mỗi chi nhánh, thời gian mở cửa phải trước thời gian đóng cửa.', 16, 1)
			ROLLBACK TRANSACTION;
			RETURN
		END
	END
GO

-- •	Địa chỉ và số điện thoại của chi nhánh phải là duy nhất để tránh trùng lặp thông tin.
GO
	ALTER TABLE CHINHANH
	ADD CONSTRAINT UQ_CHINHANH_DIACHI UNIQUE (DIACHI);

	ALTER TABLE CHINHANH
	ADD CONSTRAINT UQ_CHINHANH_SDT UNIQUE (SDT);
GO

-- •	Số lượng món hoặc combo phải lớn hơn 0 trong mỗi chi tiết món.
GO
	CREATE TRIGGER TRG_CHITIETMON_INSERT_UPDATE_SLMON
	ON CHITIETMONAN
	FOR INSERT, UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		IF EXISTS	(SELECT 1
					FROM INSERTED
					WHERE SOLUONG <= 0)
		BEGIN
			RAISERROR (N'Số lượng món hoặc combo phải lớn hơn 0 trong mỗi chi tiết món.', 16, 1)
			ROLLBACK TRANSACTION;
			RETURN
		END
	END
GO

-- •	Đơn giá tổng được tính theo số lượng món ăn hoặc combo và đơn giá.
/*
				I	D	U
CHITIETMONAN	+	-	+ (SOLUONG, DONGIATONG)
MONAN			-	+	+ (GIAHIENTAI)
COMBOMONAN		-	+	+ (DONGIACOMBO)
*/
GO
	CREATE TRIGGER TRG_CHITIETMONAN_INSERT_UPDATE_DONGIATONG
	ON CHITIETMONAN
	AFTER INSERT, UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		UPDATE CT
		SET CT.DONGIATONG = 
			CASE
				WHEN CT.MAMON IS NOT NULL THEN CT.SOLUONG * M.GIAHIENTAI
				WHEN CT.MACOMBO IS NOT NULL THEN CT.SOLUONG * CB.DONGIACOMBO
				ELSE 0
			END
		FROM CHITIETMONAN CT
		LEFT JOIN MONAN M ON CT.MAMON = M.MAMON
		LEFT JOIN COMBOMONAN CB ON CT.MACOMBO = CB.MACOMBO
		INNER JOIN INSERTED I ON CT.MACTMON = I.MACTMON
	END
GO
	CREATE TRIGGER TRG_MONAN_UPDATE_DONGIATONG
	ON MONAN
	AFTER UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		UPDATE CT
		SET CT.DONGIATONG = CT.SOLUONG * I.GIAHIENTAI
		FROM CHITIETMONAN CT
		INNER JOIN INSERTED I ON CT.MAMON = I.MAMON
	END
GO
	CREATE TRIGGER TRG_COMBOMONAN_UPDATE_DONGIATONG
	ON COMBOMONAN
	AFTER UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		UPDATE CT
		SET CT.DONGIATONG = CT.SOLUONG * I.DONGIACOMBO
		FROM CHITIETMONAN CT
		INNER JOIN INSERTED I ON CT.MAMON = I.MACOMBO
	END
GO
	CREATE TRIGGER TRG_CHITIETMONAN_UPDATE_DONGIATONG
	ON CHITIETMONAN
	AFTER UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		IF UPDATE(DONGIATONG)
		BEGIN
			RAISERROR ('Không thể cập nhật tổng tiền hóa đơn', 16, 1)
			ROLLBACK TRANSACTION;
		END
	END
GO

-- •	Khách hàng chỉ có thể chọn món từ thực đơn của nhà hàng.
GO
	CREATE TRIGGER TRG_CHITIETMONAN_VALIDATE_CHONMON
	ON CHITIETMONAN
	AFTER INSERT, UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		IF EXISTS (
			SELECT 1
			FROM INSERTED I
			WHERE 
				(I.MAMON IS NOT NULL AND NOT EXISTS (SELECT 1 FROM MONAN M WHERE M.MAMON = I.MAMON))
				OR 
				(I.MACOMBO IS NOT NULL AND NOT EXISTS (SELECT 1 FROM COMBOMONAN CB WHERE CB.MACOMBO = I.MACOMBO))
		)
		BEGIN
			RAISERROR (N'Khách hàng chỉ có thể chọn món từ thực đơn của nhà hàng.', 16, 1);
			ROLLBACK TRANSACTION;
			RETURN;
		END;

		IF EXISTS (
			SELECT 1
			FROM INSERTED I
			WHERE I.MAMON IS NOT NULL AND I.MACOMBO IS NOT NULL
		)
		BEGIN
			RAISERROR (N'Mã món và mã combo không được tồn tại đồng thời.', 16, 1);
			ROLLBACK TRANSACTION;
			RETURN;
		END;

		IF EXISTS (
			SELECT 1
			FROM INSERTED I
			WHERE I.MAMON IS NULL AND I.MACOMBO IS NULL
		)
		BEGIN
			RAISERROR (N'Phải chọn ít nhất một trong mã món hoặc mã combo.', 16, 1);
			ROLLBACK TRANSACTION;
			RETURN;
		END;
	END;
GO
-- •	Đơn đặt món phải được xác nhận trước khi chuẩn bị.
GO
	CREATE TRIGGER TRG_CHITIETMONAN_INSERT_XACNHAN
	ON CHITIETMONAN
	FOR INSERT
	AS
	BEGIN
		SET NOCOUNT ON;

		IF EXISTS	(SELECT 1
					FROM DONDATMON D
					INNER JOIN INSERTED I ON D.MADON = I.MADONDATMON
					WHERE D.TRANGTHAI = N'Chưa xác nhận' OR I.MADONDATMON IS NULL)
		BEGIN
			RAISERROR (N'Đơn đặt món phải được xác nhận trước khi chuẩn bị.', 16, 1)
			ROLLBACK TRANSACTION;
		END
	END
GO
	CREATE TRIGGER TRG_DONDATMON_UPDATE_XACNHAN
	ON DONDATMON
	AFTER UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;
		
		DELETE FROM CHITIETMONAN
		WHERE MADONDATMON = (SELECT I.MADON
							FROM INSERTED I
							WHERE I.TRANGTHAI = N'Chưa xác nhận')
	END
GO

-- Thành tiền trong đơn đặt món bằng tổng các chi tiết món ăn thuộc về hóa đơn
GO
	CREATE TRIGGER TRG_DONDATMON_INSERT_UPDATE_THANHTIEN
	ON DONDATMON
	AFTER UPDATE
	AS
	BEGIN
		IF UPDATE(THANHTIEN)
		BEGIN
			RAISERROR (N'Thành tiền được cập nhật tự động, không thể cập nhật thủ công', 16, 1)
			ROLLBACK TRANSACTION;
		END
	END
GO
	CREATE TRIGGER TRG_CHITIETMONAN_INSERT_UPDATE_THANHTIEN
	ON CHITIETMONAN
	AFTER INSERT, UPDATE, DELETE
	AS
	BEGIN
		SET NOCOUNT ON;

		UPDATE D
		SET D.THANHTIEN = ISNULL(SUM_CT.TOTAL, 0)
		FROM DONDATMON D
		LEFT JOIN (
			SELECT CT.MADONDATMON, SUM(CT.DONGIATONG) AS TOTAL
			FROM CHITIETMONAN CT
			GROUP BY CT.MADONDATMON
		) AS SUM_CT
		ON D.MADON = SUM_CT.MADONDATMON;
	END;
GO

-- •	Khi đơn đặt món có trạng thái thành công, thành tiền mới được cộng vào tổng tiền của hoá đơn.
GO
	CREATE TRIGGER TRG_DONDATMON_INSERT_UPDATE_TINHHOADON
	ON DONDATMON
	AFTER INSERT, UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		UPDATE HD
		SET HD.TONGTIEN = ISNULL(SUM_TONG.THANHTIEN_TOTAL, 0) * (1 + HD.VAT) * (1 - ISNULL(KM.LUONGKMPHANTRAM, 0))
		FROM HOADON HD
		LEFT JOIN (
			SELECT I.HOADONLIENQUAN, SUM(I.THANHTIEN) AS THANHTIEN_TOTAL
			FROM DONDATMON I
			GROUP BY I.HOADONLIENQUAN
		) AS SUM_TONG
		ON HD.MAHOADON = SUM_TONG.HOADONLIENQUAN
		LEFT JOIN KHUYENMAI KM
		ON HD.MAKHUYENMAI = KM.MAKHUYENMAI;
	END;

GO
	CREATE TRIGGER TRG_DONDATMON_DELETE_TINHHOADON
	ON DONDATMON
	AFTER DELETE
	AS
	BEGIN
		SET NOCOUNT ON;

		UPDATE HD
		SET HD.TONGTIEN = HD.TONGTIEN - I.THANHTIEN * (1 + HD.VAT) * (1 - KM.LUONGKMPHANTRAM)
		FROM HOADON HD
		INNER JOIN INSERTED I ON HD.MAHOADON = I.HOADONLIENQUAN
		INNER JOIN KHUYENMAI KM ON HD.MAKHUYENMAI = KM.MAKHUYENMAI
	END
GO
	CREATE TRIGGER TRG_HOADON_UPDATE_TINHHOADON
	ON HOADON
	AFTER UPDATE
	AS
	BEGIN
		SET NOCOUNT ON;

		IF UPDATE(TONGTIEN)
		BEGIN
			RAISERROR ('Không thể cập nhật tổng tiền hóa đơn', 16, 1)
			ROLLBACK TRANSACTION;
		END
	END
GO

-- Phải có số điện thoại hợp lệ và email để liên lạc hoặc xác nhận các đơn hàng trực tuyến. 
GO
	CREATE FUNCTION dbo.ChkValidEmail(@EMAIL varchar(100))RETURNS bit as
	BEGIN     
	  DECLARE @bitEmailVal as Bit
	  DECLARE @EmailText varchar(100)

	  SET @EmailText=ltrim(rtrim(isnull(@EMAIL,'')))

	  SET @bitEmailVal = case when @EmailText = '' then 0
							  when @EmailText like '% %' then 0
							  when @EmailText like ('%["(),:;<>\]%') then 0
							  when substring(@EmailText,charindex('@',@EmailText),len(@EmailText)) like ('%[!#$%&*+/=?^`_{|]%') then 0
							  when (left(@EmailText,1) like ('[-_.+]') or right(@EmailText,1) like ('[-_.+]')) then 0                                                                                    
							  when (@EmailText like '%[%' or @EmailText like '%]%') then 0
							  when @EmailText LIKE '%@%@%' then 0
							  when @EmailText NOT LIKE '_%@_%._%' then 0
							  else 1 
						  end
	  RETURN @bitEmailVal
	END
GO
	CREATE FUNCTION dbo.ChkValidPhone(@SDT varchar(10))RETURNS BIT AS
	BEGIN
		DECLARE @BITPHONEVAL AS BIT

		IF LEN(@SDT)=10 AND @SDT NOT LIKE '%[^0-9]%'
		BEGIN
			IF @SDT LIKE '086%'
			OR @SDT LIKE '096%'
			OR @SDT LIKE '097%'
			OR @SDT LIKE '098%'
			OR @SDT LIKE '032%'
			OR @SDT LIKE '033%'
			OR @SDT LIKE '034%'
			OR @SDT LIKE '035%'
			OR @SDT LIKE '036%'
			OR @SDT LIKE '037%'
			OR @SDT LIKE '038%'
			OR @SDT LIKE '039%'
			OR @SDT LIKE '088%'
			OR @SDT LIKE '091%'
			OR @SDT LIKE '094%'
			OR @SDT LIKE '083%'
			OR @SDT LIKE '084%'
			OR @SDT LIKE '085%'
			OR @SDT LIKE '081%'
			OR @SDT LIKE '082%'
			OR @SDT LIKE '089%'
			OR @SDT LIKE '090%'
			OR @SDT LIKE '093%'
			OR @SDT LIKE '070%'
			OR @SDT LIKE '079%'
			OR @SDT LIKE '078%'
			OR @SDT LIKE '077%'
			OR @SDT LIKE '076%'
			OR @SDT LIKE '092%'
			OR @SDT LIKE '056%'
			OR @SDT LIKE '058%'
			OR @SDT LIKE '099%'
			OR @SDT LIKE '059%'
				SET @BITPHONEVAL = 1
			ELSE
				SET @BITPHONEVAL = 0
		END
		ELSE
			SET @BITPHONEVAL = 0

		RETURN @BITPHONEVAL
	END
GO
	CREATE TRIGGER TRG_KHACHHANG_INSERT_UPDATE_CHECK_EMAIL_PHONENUM
	ON KHACHHANG
	AFTER INSERT, UPDATE
	AS
	BEGIN
		IF EXISTS (SELECT 1 FROM INSERTED WHERE 
				dbo.ChkValidPhone(SDT) = 0 OR
				dbo.ChkValidEmail(Email) = 0)
		BEGIN
			RAISERROR (N'Thông tin liên lạc khách hàng không hợp lệ.', 16, 1);
			ROLLBACK;
		END;
	END;
GO
	CREATE TRIGGER TRG_CHINHANH_INSERT_UPDATE_CHECK_EMAIL_PHONENUM
	ON CHINHANH
	AFTER INSERT, UPDATE
	AS
	BEGIN
		IF EXISTS (SELECT 1 FROM INSERTED WHERE 
				dbo.ChkValidPhone(SDT) = 0 OR
				dbo.ChkValidEmail(EMAIL) = 0)
		BEGIN
			RAISERROR (N'Thông tin liên lạc chi nhánh không hợp lệ.', 16, 1);
			ROLLBACK;
		END;
	END;
GO
	CREATE TRIGGER TRG_NHANVIEN_INSERT_UPDATE_CHECK_EMAIL_PHONENUM
	ON NHANVIEN
	AFTER INSERT, UPDATE
	AS
	BEGIN
		IF EXISTS (SELECT 1 FROM INSERTED WHERE 
				dbo.ChkValidPhone(SDT) = 0 OR
				dbo.ChkValidEmail(EMAIL) = 0)
		BEGIN
			RAISERROR (N'Thông tin liên lạc nhân viên không hợp lệ.', 16, 1);
			ROLLBACK;
		END;
	END;
GO

-- MỘT BỘ PHẬN CHỈ CÓ 1 NHÂN VIÊN QUẢN LÝ VÀ MỘT NHÂN VIÊN CHỈ CÓ THỂ QUẢN LÝ MỘT BỘ PHẬN
ALTER TABLE BOPHAN
ADD CONSTRAINT UQ_BOPHAN_QUANLYBOPHAN UNIQUE (QUANLYBOPHAN);

GO


-- Lương hiện tại sẽ được tính bằng hệ số lương và lương
/* 
							I	D	U
		NHANVIEN			-	-	+ (LUONGHIENTAI)
		LICHSULAMVIEC		+	-	+ (HESOLUONG)
		BOPHAN				-	-	+ (LUONG)
*/

	CREATE TRIGGER TRG_UPDATE_LUONGHIENTAI_ON_LICHSULAMVIEC
	ON LICHSULAMVIEC
	AFTER INSERT, UPDATE
	AS
	BEGIN
		-- Cập nhật lương hiện tại cho tất cả nhân viên liên quan đến các bản ghi mới hoặc đã cập nhật
		UPDATE NV
		SET NV.LUONGHIENTAI = LSLV.HESOLUONG * BP.LUONG
		FROM NHANVIEN NV
		INNER JOIN INSERTED LSLV
			ON NV.MANHANVIEN = LSLV.MANHANVIEN
		INNER JOIN BOPHAN BP
			ON LSLV.MABOPHAN = BP.MABOPHAN
			AND LSLV.MACHINHANH = BP.MACHINHANH
		WHERE LSLV.NGAYNGHIVIEC IS NULL; -- Chỉ cập nhật nếu nhân viên chưa nghỉ việc
	END;
GO
	CREATE TRIGGER TRG_UPDATE_LUONGHIENTAI_ON_BOPHAN
	ON BOPHAN
	AFTER UPDATE
	AS
	BEGIN
		-- Cập nhật lương hiện tại cho nhân viên thuộc các bộ phận bị thay đổi lương
		UPDATE NV
		SET NV.LUONGHIENTAI = LSLV.HESOLUONG * BP.LUONG
		FROM NHANVIEN NV
		INNER JOIN LICHSULAMVIEC LSLV
			ON NV.MANHANVIEN = LSLV.MANHANVIEN
		INNER JOIN INSERTED BP
			ON LSLV.MABOPHAN = BP.MABOPHAN
			AND LSLV.MACHINHANH = BP.MACHINHANH
		WHERE LSLV.NGAYNGHIVIEC IS NULL; -- Chỉ cập nhật nếu nhân viên chưa nghỉ việc
	END;
GO
	CREATE TRIGGER TRG_UPDATE_LUONGHIENTAI_ON_NHANVIEN
	ON NHANVIEN
	AFTER UPDATE
	AS
	BEGIN
		-- Lương nhân viên là tự động cập nhật theo hệ số, không được phép cập nhật thủ công
		IF UPDATE(LUONGHIENTAI)
		BEGIN
			RAISERROR (N'Lương nhân viên là tự động cập nhật theo hệ số, không được phép cập nhật thủ công', 16, 1)
			ROLLBACK TRANSACTION;
		END
	END
	;
GO
-- Khách hàng phải thanh toán trực tuyến trước khi nhận hàng
GO
	CREATE TRIGGER TRG_DATHANGTRUCTUYEN_KIEMTRA_THANHTOAN
	ON DATHANGTRUCTUYEN
	FOR UPDATE
	AS
	BEGIN
		IF EXISTS(
			SELECT 1
			FROM INSERTED I
			JOIN DONDATMON D ON D.MADON = I.MADHTRUCTUYEN
			JOIN HOADON H ON H.MAHOADON = D.HOADONLIENQUAN
			WHERE I.TRANGTHAIGIAO = N'Đang giao hàng'
			AND H.PHUONGTHUC <> N'Thanh toán trực tuyến'
		)
		BEGIN --Ngăn chặn cập nhật giao hàng
			RAISERROR(N'Khách hàng phải thanh toán trực tuyến trước khi nhận hàng.', 16, 1)
			ROLLBACK TRANSACTION
		END
	END
GO

           
GO
	CREATE TRIGGER TRG_DATHANGTRUCTUYEN_INSERT_DUNGNHAN_DATHANG
	ON DATHANGTRUCTUYEN
	FOR INSERT
	AS
	BEGIN
		IF EXISTS (
			SELECT 1
			FROM INSERTED I
			JOIN DONDATMON D ON D.MADON = I.MADHTRUCTUYEN
			WHERE D.GIODAT >= '20:00:00'
		) 
		BEGIN
			RAISERROR(N'Nhà hàng dừng nhận đặt hàng trực tuyến sau 20h00', 16, 1)
			ROLLBACK TRANSACTION
			RETURN
		END
	END
GO

-- Đơn hàng chỉ được chấp nhận nếu món ăn trong đơn hàng có trạng thái "có phục vụ". 
GO
	CREATE TRIGGER TRG_DONDATMON_KIEMTRA_TRANGTHAI_MONAN
	ON DONDATMON
	FOR INSERT
	AS
	BEGIN
		IF NOT EXISTS(
			SELECT 1
			FROM INSERTED I
			JOIN CHITIETMONAN C ON C.MADONDATMON = I.MADON
			JOIN MONAN M ON C.MAMON = M.MAMON
			WHERE M.TRANGTHAIPHUCVU LIKE N'Có phục vụ'
		)
		BEGIN
			RAISERROR(N'Món ăn không có sẵn!', 16, 1)
			ROLLBACK TRANSACTION
			RETURN
		END
	END
GO


-- Thời gian đặt món phải được ghi chú rõ ràng
GO
	CREATE TRIGGER TRG_DONDATMON_INSERT_UPDATE_TIME_DATE_CHECK
	ON DONDATMON
	FOR INSERT, UPDATE
	AS
	BEGIN
		IF  (EXISTS(SELECT 1 
					FROM INSERTED I
					WHERE I.NGAYDAT IS NULL OR I.GIODAT IS NULL ))
			BEGIN
				RAISERROR(N'Thời gian đặt món phải được ghi chú rõ ràng!', 16, 1)
				ROLLBACK TRANSACTION
				RETURN
			END
	END
GO

-- Thời gian giao hàng dự kiến phải nằm trong khung giờ hoạt động của chi nhánh. 
CREATE TRIGGER TRG_KIEMTRA_THOIGIANGIAO
ON DATHANGTRUCTUYEN
FOR INSERT
AS
BEGIN
	IF NOT EXISTS(
		SELECT 1
		FROM INSERTED I
		JOIN DONDATMON D ON D.MADON = I.MADHTRUCTUYEN
		JOIN CHINHANH C ON C.MACHINHANH = D.CHINHANHDAT
		WHERE I.THOIGIANGIAO BETWEEN C.THOIGIANMOCUA AND C.THOIGIANDONGCUA
	)
	BEGIN
		RAISERROR(N'Thời gian giao hàng dự kiến phải nằm trong khung giờ hoạt động của chi nhánh.', 16, 1)
        ROLLBACK TRANSACTION
	END
END
GO

-- Kiểm tra đơn đặt phải được thực hiện trước khi bắt đầu chế biến
CREATE TRIGGER TRG_KIEMTRA_TRUOCCHEBIEN
ON DONDATMON
FOR UPDATE
AS
BEGIN
	DECLARE @ORDERID CHAR(10)

	SET @ORDERID = (SELECT MADON FROM INSERTED)

	IF NOT EXISTS(
		SELECT 1
		FROM DONDATMON
		WHERE MADON = @ORDERID
		AND TRANGTHAI = N'Đã xác nhận'
	)
	BEGIN
		RAISERROR(N'Đơn hàng chưa được xác nhận. Không thể bắt đầu chế biến!', 16, 1)
        ROLLBACK TRANSACTION
	END
END
GO

-- Món ăn khi đánh giá cần có đủ về đánh giá về chất lượng và số tiền. 
CREATE TRIGGER TRG_KIEMTRA_DANHGIAMONAN
ON DANHGIAMONAN
FOR INSERT
AS
BEGIN
	IF EXISTS(
		SELECT 1
		FROM INSERTED
		WHERE DIEMGIACA IS NULL AND DIEMCHATLUONGMONAN IS NULL
	)
	BEGIN
		RAISERROR(N'Mỗi đánh giá món ăn cần có đầy đủ đánh giá về chất lượng và số tiền!', 16, 1)
        ROLLBACK TRANSACTION
        RETURN
	END
END
GO

--Một đánh giá sẽ đánh giá 1 chi nhánh(phục vụ, vị trí, không gian) mà khách hàng đặt món (tại bàn/trực tuyến). 
CREATE TRIGGER TRG_KIEMTRA_DANHGIACHINHANH
ON DANHGIA
FOR INSERT
AS
BEGIN
	DECLARE @CHI_NHANH CHAR(10), @MA_KH CHAR(10)

	SELECT @CHI_NHANH = CHINHANH, @MA_KH = KHACHHANGDANHGIA
	FROM INSERTED

	--Kiểm tra xem chi nhánh đã tồn tại với đơn đặt hàng của khách hàng chưa
	IF NOT EXISTS(
		SELECT 1
		FROM DONDATMON D
		WHERE D.KHACHHANGDAT = @MA_KH
		AND D.CHINHANHDAT = @CHI_NHANH
	)
	BEGIN
		RAISERROR(N'Đánh giá chi nhánh yêu cầu khách hàng phải có đơn đặt hàng từ chi nhánh này.', 16, 1)
        ROLLBACK TRANSACTION
        RETURN
	END
END
GO