<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu for Branch {{branchId}}</title>
    <link rel="stylesheet" href="/public/styles.css">
    <link rel="stylesheet" href="/public/menu.css">

    <script>
        async function loadCategoryItems(branchId, category) {
            const response = await fetch(`/menu/branch/${branchId}/category/${category}`);
            const items = await response.json();

            const itemsContainer = document.querySelector('.items-container');
            itemsContainer.innerHTML = '';

            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'item';
                itemDiv.innerHTML = `
                    <img src="${item.IMAGE_LINK || 'placeholder.jpg'}" alt="${item.TENMON}">
                    <div class="item-info">
                        <div class="item-title">${item.TENMON}</div>
                        <div class="item-price">Price: ${item.GIAHIENTAI} VND</div>
                        <div class="cart-controls">
                            <button class="decrement" data-id="${item.MAMENU}" disabled>-</button>
                            <span class="item-count" id="count-${item.MAMENU}">0</span>
                            <button class="increment" data-id="${item.MAMENU}">+</button>
                            <button class="add-to-cart" data-id="${item.MAMENU}">Add to Cart</button>
                        </div>
                    </div>
                `;

                itemsContainer.appendChild(itemDiv);
            });

            // Attach event listeners to increment and decrement buttons
            setupCartControls();
        }

        // Handle the "Add to Cart" button click
        function setupCartControls() {
            const incrementButtons = document.querySelectorAll('.increment');
            const decrementButtons = document.querySelectorAll('.decrement');
            const addToCartButtons = document.querySelectorAll('.add-to-cart');

            // Handle increment button click
            incrementButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const itemId = button.dataset.id;
                    const countSpan = document.querySelector(`#count-${itemId}`);
                    const decrementButton = document.querySelector(`.decrement[data-id="${itemId}"]`);

                    let count = parseInt(countSpan.textContent);
                    count++;
                    countSpan.textContent = count;
                    decrementButton.disabled = count === 0;
                });
            });

            // Handle decrement button click
            decrementButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const itemId = button.dataset.id;
                    const countSpan = document.querySelector(`#count-${itemId}`);
                    const decrementButton = document.querySelector(`.decrement[data-id="${itemId}"]`);

                    let count = parseInt(countSpan.textContent);
                    if (count > 0) {
                        count--;
                        countSpan.textContent = count;
                        decrementButton.disabled = count === 0;
                    }
                });
            });

            // Handle "Add to Cart" button click
            addToCartButtons.forEach(button => {
                button.addEventListener('click', async () => {
                    const itemId = button.dataset.id;
                    const countSpan = document.querySelector(`#count-${itemId}`);
                    const count = parseInt(countSpan.textContent);

                    if (count > 0) {
                        try {
                            const response = await fetch('/menu/add-to-cart', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    MAMENU: itemId,
                                    SOLUONG: count,
                                }),
                            });

                            if (response.ok) {
                                alert(`Added ${count} items to the cart!`);
                            } else if (response.status === 401) {
                                // Redirect to login page if unauthorized
                                alert('Please log in to add items to the cart.');
                                window.location.href = '/login';
                            } else {
                                alert('Failed to add item to cart');
                            }
                        } catch (error) {
                            console.error('Error adding item to cart:', error);
                            alert('Error adding item to cart');
                        }
                    } else {
                        alert('Please select a quantity greater than 0');
                    }
                });
            });
        }

        function setActiveCategory(category) {
            const tabs = document.querySelectorAll('.category-tab');
            tabs.forEach(tab => {
                tab.classList.remove('active');
                if (tab.dataset.category === category) {
                    tab.classList.add('active');
                }
            });
        }

        async function fetchBranches() {
            try {
                const response = await fetch('/menu/branches');
                const branches = await response.json();

                const selectElement = document.querySelector('.branch-selector select');
                selectElement.innerHTML = ''; // Clear any existing options

                branches.forEach(branch => {
                    const option = document.createElement('option');
                    option.value = branch.branchId;
                    option.textContent = branch.branchName;
                    selectElement.appendChild(option);
                });

                selectElement.value = '{{branchId}}';
            } catch (error) {
                console.error('Error fetching branches:', error);
            }
        }

        async function switchBranch(event) {
            event.preventDefault();
            const branchId = document.querySelector('.branch-selector select').value;

            try {
                const postResponse = await fetch('/menu/switch-branch', {
                    method: 'POST',
                    body: JSON.stringify({ branchId }),
                });

                if (!postResponse.ok) {
                    alert('Error switching branch');
                    return;
                }

                window.location.href = `/menu/branch/${branchId}`;
            } catch (error) {
                console.error("Error in switchBranch:", error);
                alert('An error occurred while switching the branch');
            }
        }
    </script>
</head>

<body>
    <div class="menu_container">
        <div class="menu_container-choose">
            <div class="medium-title-deli">Menu for Branch {{branchId}}</div>

            <div class="branch-selector">
                <label for="branchSelect">Select Branch: </label>
                <select onchange="switchBranch(event)">
                    {{#each branches}}
                    <option value="{{this.branchId}}" {{#if (eq this.branchId ../branchId)}}selected{{/if}}>{{this.branchName}}
                    </option>
                    {{/each}}
                </select>
            </div>
        </div>

        <div class="categories">
            {{#each categories}}
            <div class="category-tab" data-category="{{this.categoryName}}"
                onclick="setActiveCategory('{{this.categoryName}}'); loadCategoryItems('{{../branchId}}', '{{this.categoryName}}');">
                {{this.categoryName}}
            </div>
            {{/each}}
        </div>

        <div class="items-container">
            <!-- Items will be dynamically loaded here -->
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                fetchBranches();
                const firstCategory = document.querySelector('.category-tab');
                if (firstCategory) {
                    const branchId = '{{branchId}}';
                    const category = firstCategory.dataset.category;
                    setActiveCategory(category);
                    loadCategoryItems(branchId, category);
                }
            });
        </script>
    </div>

</body>

</html>